blogdown:::serve_site()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
setwd("/Users/aurel/Documents/github/r-dev/docimology/grades_abroad_conversion")
# Chunk 2: data_load
# data initially collated by Charles Delattre (last update 2017-07)
# reformatted in CSV
# and augmented by Aurélien Berra (2017-)
## use suffixes when multiple grade schemes:
## _N for number grades and _L for letter grades
equivalences <- read.csv("pn_ri_grades_notes_equivalences.csv", header = FALSE)
# transpose table
eq <- t(equivalences)
# name cols from row 1 and delete it
colnames(eq) <- as.character(unlist(eq[1, ]))
eq <- eq[-1,]
# delete row 1 corresponding to grade 0, so that row names equal 0-20 grades
eq <- eq[-1, ]
rownames(eq) <- paste(1:20)
eq <- as.data.frame(eq)
# Chunk 3: table_query
selectInput(
'host',
'Host University',
colnames(eq),
multiple = TRUE,
selectize = TRUE,
selected = "Nanterre"
)
renderTable({
eq %>% select(Nanterre, input$host)
}, hover = TRUE)
# Chunk 4: table_query_basic_commands
# query searchedUni grade for 10 (= Nanterre grade implicitly)
eq$Colombie[10]
eq$Ottawa[10]
eq$Amsterdam_N[10]
eq$Amsterdam_L[10]
# query Nanterre grade for searchedUni grade
which(eq$Ottawa == "C")
# query Nanterre grade(s) for searchedUni
which(eq$Essex_L == "F")
# use dplyr verbs
# filter(eq, Amsterdam == "A")
filter(select(eq, Nanterre, Barcelone), Barcelone == "7")
filter(select(eq, Nanterre, Ottawa), Ottawa == "C")
# with %>% operator for the sake of readability
eq %>% select(Nanterre, Ottawa) %>% filter(Ottawa == "C")
# with variable (quoted and unquoted to work with dplyr functions)
uni <- quo(Ottawa)
eq %>% select(Nanterre, UQ(uni)) %>% filter(UQ(uni) == "C")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
setwd("/Users/aurel/Documents/github/r-dev/docimology/grades_abroad_conversion")
# Chunk 2: data_load
# data initially collated by Charles Delattre (last update 2017-07)
# reformatted in CSV
# and augmented by Aurélien Berra (2017-)
## use suffixes when multiple grade schemes:
## _N for number grades and _L for letter grades
equivalences <- read.csv("pn_ri_grades_notes_equivalences.csv", header = FALSE)
# transpose table
eq <- t(equivalences)
# name cols from row 1 and delete it
colnames(eq) <- as.character(unlist(eq[1, ]))
eq <- eq[-1,]
# delete row 1 corresponding to grade 0, so that row names equal 0-20 grades
eq <- eq[-1, ]
rownames(eq) <- paste(1:20)
eq <- as.data.frame(eq)
# Chunk 3: table_query
selectInput(
'host',
'Host University',
colnames(eq),
multiple = TRUE,
selectize = TRUE,
selected = "Nanterre"
)
renderTable({
eq %>% select(Nanterre, input$host)
}, hover = TRUE)
# Chunk 4: table_query_basic_commands
# query searchedUni grade for 10 (= Nanterre grade implicitly)
eq$Colombie[10]
eq$Ottawa[10]
eq$Amsterdam_N[10]
eq$Amsterdam_L[10]
# query Nanterre grade for searchedUni grade
which(eq$Ottawa == "C")
# query Nanterre grade(s) for searchedUni
which(eq$Essex_L == "F")
# use dplyr verbs
# filter(eq, Amsterdam == "A")
filter(select(eq, Nanterre, Barcelone), Barcelone == "7")
filter(select(eq, Nanterre, Ottawa), Ottawa == "C")
# with %>% operator for the sake of readability
eq %>% select(Nanterre, Ottawa) %>% filter(Ottawa == "C")
# with variable (quoted and unquoted to work with dplyr functions)
uni <- quo(Ottawa)
eq %>% select(Nanterre, UQ(uni)) %>% filter(UQ(uni) == "C")
